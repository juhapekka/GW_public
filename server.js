let u=require("ws");var e=require("express"),t=require("http");let n=require("https"),c=require("crypto");var a=require("fs");let i=require("os");var s=e(),r="./certs/localhost-key.pem",l="./certs/localhost.pem";let o;var d=a.existsSync(r)&&a.existsSync(l);if(d)try{var y={key:a.readFileSync(r),cert:a.readFileSync(l)};o=n.createServer(y,s),console.log("🔒 HTTPS enabled using local certificates.")}catch(e){console.error("❌ Error reading SSL certificates:",e),console.warn("⚠️ Falling back to HTTP due to certificate error."),o=t.createServer(s),console.log("ℹ️ HTTP server created using Express app (fallback).")}else console.warn("⚠️ HTTPS was intended, but no certificates found at ./certs/. Using HTTP."),o=t.createServer(s),console.log("ℹ️ HTTP server created using Express app.");let g=new u.Server({noServer:!0}),h={};s.use((e,t,a)=>{(e.url.endsWith("client.js")||e.url.endsWith("server.js"))&&(t.setHeader("Cache-Control","no-store, no-cache, must-revalidate, proxy-revalidate"),t.setHeader("Pragma","no-cache"),t.setHeader("Expires","0"),t.setHeader("Surrogate-Control","no-store")),a()}),s.use((e,t,a)=>{var s=e.headers["x-forwarded-for"]||e.socket.remoteAddress,n=`[3${Math.floor(6*Math.random())+1}m`;console.log(n+`[HTTP ${s}] ${e.method} ${e.url}[0m`),a()}),s.use(e.static(__dirname));d=1024,r=1024;let m=[{id:"default",music:"JuhasSong.mp3",scale:1.5,map:"kenttä1.png",spawns:[{x:.3*d,z:.46*r},{x:768,z:1.43*r}]},{id:"default2",music:"CallofDiablo.mp3",scale:1.5,map:"kenttä2.png",spawns:[{x:.13*d,z:.843*r},{x:.94*d,z:r}]}],p=2,v=50,f={},I=[];class w{constructor(e){this.id=e,this.players={},this.gameActuallyStarted=!1,this.currentLevelIndex=Math.floor(Math.random()*m.length),this.currentLevelData=m[this.currentLevelIndex],this.nextSpawnIndex=0,this.broadcastInterval=null,this.lastActivityTime=Date.now(),console.log(`[GameInstance ${this.id}] Created. Initial level: ${this.currentLevelData.id} (Map: ${this.currentLevelData.map})`),this.startBroadcasting()}updateLastActivity(){this.lastActivityTime=Date.now()}addPlayer(t,a,e){this.updateLastActivity();var s=Object.values(this.players).find(e=>e.ws===t);if(s&&s.id!==a)return console.warn(`[GameInstance ${this.id}] WS for new player ${a} (name: ${e}) is already associated with existing player ${s.id} ('${s.name}') in this instance. Aborting add.`),!1;s=Object.values(this.players).filter(e=>"disconnected_ingame"!==e.status&&e.id!==a).length;if(s>=p&&!this.players[a])return console.warn(`[GameInstance ${this.id}] Attempted to add new player ${a} to a full instance (${s}/${p}).`),!1;var s=this.currentLevelData,n=this.nextSpawnIndex%s.spawns.length,e=e||(this.players[a]?this.players[a].name:"P-"+a.substring(0,4)),i=!this.players[a];this.players[a]={...this.players[a]||{},ws:t,id:a,name:e,x:(i?s.spawns[n]:this.players[a]).x,z:(i?s.spawns[n]:this.players[a]).z,angle:i?Math.PI:this.players[a].angle,isLanded:!i&&this.players[a].isLanded,energy:i?100:this.players[a].energy,velocityX_texel:i?0:this.players[a].velocityX_texel,velocityZ_texel:i?0:this.players[a].velocityZ_texel,status:i?"waiting":this.players[a].status,initialStatusDuringGameStart:i?null:this.players[a].initialStatusDuringGameStart},i&&this.nextSpawnIndex++,t.gameInstanceId=this.id,t.playerIdInInstance=a,console.log(`[GameInstance ${this.id}] Player ${a} ('${this.players[a].name}') processed. Spawn index (if new): ${n}. Total non-disconnected: `+Object.keys(this.players).filter(e=>"disconnected_ingame"!==this.players[e].status).length);try{t.send(JSON.stringify({myId:a,config:{levelId:s.id,music:s.music,map:s.map,scale:s.scale,spawn:{x:this.players[a].x,z:this.players[a].z}}})),console.log(`[GameInstance ${this.id}] Sent config for level ${s.id} to player ${a}.`)}catch(e){return console.error(`[GameInstance ${this.id}] FAILED to send config to player ${a}:`,e),delete this.players[a],!1}return this.sendFullPlayerStateTo(t),this.broadcastPlayerListToAll(),setTimeout(()=>{(Object.values(this.players).filter(e=>"waiting"===e.status&&e.name&&!e.name.startsWith("P-")&&e.ws&&e.ws.readyState===u.OPEN).length>=p||Object.values(this.players).filter(e=>"waiting"===e.status&&e.ws&&e.ws.readyState===u.OPEN).length>=p)&&this.checkAndStartGame()},500),!0}broadcastPlayerListToAll(){this.updateLastActivity();var a,s={};for(a in this.players){let{ws:e,...t}=this.players[a];s[a]=t}this.sendToAll(s)}removePlayer(e){this.updateLastActivity();var t=this.players[e];let a=!1;t&&(s=t.status,a=(!this.gameActuallyStarted||"playing"!==s&&"dying"!==s&&"waiting"!==s&&"playing"!==t.initialStatusDuringGameStart?(console.log(`[GameInstance ${this.id}] Player ${e} ('${t.name}') removed (status: ${s}).`),t.ws&&(t.ws.gameInstanceId=null),delete this.players[e]):(t.status="disconnected_ingame",t.ws&&(t.ws.gameInstanceId=null),t.ws=null,console.log(`[GameInstance ${this.id}] Player ${e} ('${t.name}') marked as 'disconnected_ingame'.`),this.checkWinConditionAndBroadcast()),!0),this.broadcastPlayerListToAll());var s=Object.values(this.players).filter(e=>e.ws&&e.ws.readyState===u.OPEN).length,e=Object.values(this.players).filter(e=>"disconnected_ingame"!==e.status).length;return 0===s&&0===e?(console.log(`[GameInstance ${this.id}] Is now completely empty. Marking for cleanup.`),this.stopBroadcasting(),S(),!0):(a&&(e<p||!this.gameActuallyStarted)&&(console.log(`[GameInstance ${this.id}] Spot may have opened. Non-disconnected: ${e}. Game started: ${this.gameActuallyStarted}. Checking queue.`),S()),!1)}sendToAll(e){this.updateLastActivity();let a=JSON.stringify(e);Object.values(this.players).forEach(t=>{if(t.ws&&t.ws.readyState===u.OPEN)try{t.ws.send(a)}catch(e){console.error(`[GameInstance ${this.id}] Error sending to ${t.id}:`,e)}})}sendFullPlayerStateTo(e){this.updateLastActivity();var a,s={};for(a in this.players){let{ws:e,...t}=this.players[a];"disconnected_ingame"!==t.status&&(s[a]=t)}if(e&&e.readyState===u.OPEN)try{e.send(JSON.stringify(s))}catch(e){console.error(`[GameInstance ${this.id}] Error sending full state:`,e)}}resetGameVariablesForNewRound(){this.updateLastActivity(),console.log(`🔄 [GameInstance ${this.id}] Resetting game instance variables. Game will not auto-restart for existing players.`),this.gameActuallyStarted=!1,this.nextSpawnIndex=0,this.currentLevelIndex=(this.currentLevelIndex+1)%m.length,this.currentLevelData=m[this.currentLevelIndex],console.log(`[GameInstance ${this.id}] Instance reset. Next potential game on level: `+this.currentLevelData.id);var e,t=[];for(e in this.players)this.players[e].ws&&this.players[e].ws.readyState===u.OPEN&&t.push(this.players[e].ws);this.players={},S()}addPlayer(t,e,a){this.updateLastActivity();var s=Object.values(this.players).find(e=>e.ws===t);if(s&&s.id!==e)return console.warn(`[GameInstance ${this.id}] WS for new player ${e} (name: ${a}) is already associated with existing player ${s.id} ('${s.name}') in this instance. Aborting add.`),t.readyState===u.OPEN&&t.close(1008,"Session conflict"),!1;s=Object.values(this.players).filter(e=>"disconnected_ingame"!==e.status).length;if(this.gameActuallyStarted&&s>=p&&!this.players[e])return console.warn(`[GameInstance ${this.id}] Attempted to add new player ${e} to an active and full instance. Rejecting.`),!1;if(!this.gameActuallyStarted&&s>=p&&!this.players[e])return console.warn(`[GameInstance ${this.id}] Attempted to add new player ${e} to a full (but not started) instance. Rejecting.`),!1;var s=this.currentLevelData,n=this.nextSpawnIndex%s.spawns.length,a=a||"P-"+e.substring(0,4),i=!this.players[e];this.players[e]={ws:t,id:e,name:a,x:s.spawns[n].x,z:s.spawns[n].z,angle:Math.PI,isLanded:!1,energy:100,velocityX_texel:0,velocityZ_texel:0,status:"waiting",initialStatusDuringGameStart:null},i&&this.nextSpawnIndex++,t.gameInstanceId=this.id,t.playerIdInInstance=e,console.log(`[GameInstance ${this.id}] Player ${e} ('${this.players[e].name}') added/updated. Spawn index: ${n}. Total non-disconnected: `+Object.keys(this.players).filter(e=>"disconnected_ingame"!==this.players[e].status).length);try{t.send(JSON.stringify({myId:e,config:{levelId:s.id,music:s.music,map:s.map,scale:s.scale,spawn:{x:this.players[e].x,z:this.players[e].z}}})),console.log(`[GameInstance ${this.id}] Sent config for level ${s.id} to player ${e}.`)}catch(e){}return this.broadcastPlayerListToAll(),setTimeout(()=>{this.checkAndStartGame()},1e3),!0}checkAndStartGame(){if(this.updateLastActivity(),!this.gameActuallyStarted){var e=Object.values(this.players).filter(e=>"waiting"===e.status&&e.ws&&e.ws.readyState===u.OPEN),t=e.filter(e=>e.name&&!e.name.startsWith("P-"));if(t.length>=p){console.log(`✅ [GameInstance ${this.id}] Enough named players waiting (${t.length}). Starting game!`),this.gameActuallyStarted=!0;let s={},n=[];Object.values(this.players).forEach(a=>{if("waiting"===a.status&&a.ws&&a.ws.readyState===u.OPEN&&(a.status="playing",a.initialStatusDuringGameStart="playing"),"playing"===a.status){let{ws:e,...t}=a;s[a.id]=t,n.push({id:a.id,name:a.name}),console.log(`   -> [GameInstance ${this.id}] Player ${a.id} ('${a.name}') status is 'playing'.`)}}),Object.values(this.players).forEach(t=>{var e;"playing"===t.status&&t.ws&&t.ws.readyState===u.OPEN&&(e=n.find(e=>e.id!==t.id),t.ws.send(JSON.stringify({type:"game_started",initialPlayersState:s,opponentName:e?e.name:"Player"})))})}else console.log(`[GameInstance ${this.id}] Waiting for more named players. Currently ${t.length}/${p}. Total waiting: `+e.length)}}checkWinConditionAndBroadcast(){if(this.updateLastActivity(),this.gameActuallyStarted){var e,s=[],n=[];for(e in this.players){var t=this.players[e];"playing"!==t.initialStatusDuringGameStart&&!["playing","dying","lost_game","won_game","disconnected_ingame"].includes(t.status)||n.push(e),"playing"!==t.status&&"dying"!==t.status||s.push(e)}if(1===s.length){let t=s[0],e=!0,a=!1;for(var i of n)if(i!==t){a=!0;i=this.players[i];if(!i||!["lost_game","disconnected_ingame","won_game"].includes(i.status)){e=!1;break}}this.players[t]&&"playing"===this.players[t].status&&a&&e&&(Object.values(this.players).some(e=>e.id!==t&&"won_game"===e.status)||(console.log(`🏆 [GameInstance ${this.id}] Player ${t} ('${this.players[t].name}') wins!`),this.players[t].status="won_game",this.sendToAll({type:"game_over_win",winnerId:t}),this.resetGameVariablesForNewRound()))}else if(0===s.length&&this.gameActuallyStarted){let e=!0,t=!1;for(var a of n){t=!0;a=this.players[a]?this.players[a].status:"unknown";if(!["lost_game","won_game","disconnected_ingame"].includes(a)){e=!1;break}}t&&e&&(Object.values(this.players).some(e=>"won_game"===e.status)||(console.log(`🏁 [GameInstance ${this.id}] All active players are out. Game ended (draw or all lost).`),this.resetGameVariablesForNewRound()))}}}startBroadcasting(){this.updateLastActivity(),this.broadcastInterval&&clearInterval(this.broadcastInterval),this.broadcastInterval=setInterval(()=>{if(this.gameActuallyStarted&&this.checkWinConditionAndBroadcast(),0!==Object.values(this.players).filter(e=>e.ws&&e.ws.readyState===u.OPEN).length||this.gameActuallyStarted){var a,s={};for(a in this.players){let{ws:e,...t}=this.players[a];s[a]=t}this.sendToAll(s)}},50)}stopBroadcasting(){this.broadcastInterval&&(clearInterval(this.broadcastInterval),this.broadcastInterval=null,console.log(`[GameInstance ${this.id}] Broadcasting stopped.`))}handleMessage(t,a){this.updateLastActivity();var e=this.players[t];if(e&&!["lost_game","won_game","disconnected_ingame"].includes(e.status))try{var s,n,i,r,l,o,c,d=JSON.parse(a);"set_player_name"===d.type&&d.name&&e?(s=e.name,e.name=d.name.substring(0,15),console.log(`[GameInstance ${this.id}] Player ${t} ('${s}' -> '${e.name}') updated name.`),this.broadcastPlayerListToAll(),n=Object.values(this.players).filter(e=>"disconnected_ingame"!==e.status&&e.ws&&e.ws.readyState===u.OPEN).filter(e=>e.name&&!e.name.startsWith("P-")),!this.gameActuallyStarted&&n.length>=p&&(console.log(`[GameInstance ${this.id}] Name set, enough named players now. Attempting to start game.`),this.checkAndStartGame())):"bullet"===d.type?this.sendToAll(d):"exhaust_particle"===d.type?(i={...d,type:"exhaust_particle_create"},this.sendToAll(i)):"bullet_hit_player"===d.type?(r=this.players[d.hitPlayerId])&&"playing"===r.status&&(r.energy=Math.max(0,r.energy-15),r.energy<=0&&(r.status="dying"),this.sendToAll({type:"bullet_destroyed_by_hit",bulletId:d.bulletId,hitPlayerId:d.hitPlayerId})):"ground_collision"===d.type?(l=this.players[d.playerId])&&"playing"===l.status&&!l.isLanded&&(l.energy=Math.max(0,l.energy-10),"number"==typeof d.velocityX&&(l.velocityX_texel=.4*d.velocityX),"number"==typeof d.velocityZ&&(l.velocityZ_texel=-.4*d.velocityZ),l.energy<=0&&(l.status="dying"),this.sendToAll({type:"terrain_damaged_at",x:d.x,z:d.z,radius:d.radius})):"player_exploded"===d.type?e&&"dying"===e.status&&(e.status="lost_game",e.ws&&e.ws.send(JSON.stringify({type:"game_over_lose",playerId:t})),this.sendToAll({type:"ship_exploded_at",playerId:t,x:e.x,z:e.z}),this.checkWinConditionAndBroadcast()):["playing","dying"].includes(e.status)&&"number"==typeof d.x&&(e.x=d.x,e.z=d.z,e.angle=d.angle,e.velocityX_texel=d.velocityX,e.velocityZ_texel=d.velocityZ,"playing"===e.status)&&(e.isLanded&&e.energy<100&&(e.energy=Math.min(100,e.energy+.05)),o=d.angleOKForLanding,c=d.isOverFlatGround,e.isLanded?!c||e.velocityZ_texel<-1||!o?e.isLanded=!1:(e.velocityZ_texel=0,e.velocityX_texel=0):c&&o&&e.velocityZ_texel<2.8&&-.2<=e.velocityZ_texel&&(e.isLanded=!0,e.velocityZ_texel=0,e.velocityX_texel=0),e.energy<=0)&&(e.status="dying")}catch(e){console.error(`[GameInstance ${this.id}] Error processing message from ${t}:`,e,"Raw message: "+a.toString())}}}function $(e){let{ws:t,connectionId:a,initialName:s}=e;if(!t||t.readyState!==u.OPEN)return console.log(`[Queue] WS for queued/new player ${a} is no longer open.`),{assigned:!1,removeFromQueue:!0,reason:"WebSocket not open"};for(var n in f){var i=f[n],r=Object.values(i.players).filter(e=>"disconnected_ingame"!==e.status);if(!i.gameActuallyStarted&&0<r.length&&r.length<p&&!r.some(e=>e.ws===t)){console.log(`[Assignment] Attempting to assign player ${a} to existing instance ${n} (players: ${r.length}).`);r="p_"+c.randomBytes(4).toString("hex");if(i.addPlayer(t,r,s||"P-"+r.substring(0,4)))return{assigned:!0,removeFromQueue:!0,instanceId:n};console.warn(`[Assignment] instance.addPlayer returned false for player ${a} to instance ${n}.`)}}var l,o;return Object.keys(f).length<v?(e="game_"+c.randomBytes(4).toString("hex"),console.log(`[Assignment] Creating new instance ${e} for player ${a}.`),l=new w(e),f[e]=l,o="p_"+c.randomBytes(4).toString("hex"),l.addPlayer(t,o,s||"P-"+o.substring(0,4))?{assigned:!0,removeFromQueue:!0,instanceId:e}:(console.error(`[Assignment] CRITICAL: Failed to add player ${a} to newly created instance ${e}. Removing instance.`),l.stopBroadcasting(),delete f[e],{assigned:!1,removeFromQueue:!0,reason:"Failed to add to new instance"})):(console.log(`[Assignment] No spot found for player ${a}. Current instances: ${Object.keys(f).length}/${v}.`),{assigned:!1,removeFromQueue:!1})}function S(){if(0<I.length){console.log(`[Queue] Checking waiting queue. ${I.length} player(s) waiting.`);let t=I[0];var e,a;t.ws&&t.ws.readyState===u.OPEN?(e=$(t)).assigned?((a=I.shift())&&a.ws&&(a.ws.isInQueue=!1),console.log(`[Queue] Player ${a?a.connectionId:"N/A"} assigned from queue to instance ${e.instanceId}. ${I.length} remaining.`),0<I.length&&e.assigned&&setTimeout(S,100)):e.removeFromQueue?((a=I.shift())&&a.ws&&(a.ws.isInQueue=!1),console.log(`[Queue] Player ${a?a.connectionId:"N/A"} could not be assigned and was removed from queue (reason: ${e.reason}). ${I.length} remaining.`),0<I.length&&setTimeout(S,100)):(console.log(`[Queue] Could not assign player ${t.connectionId} from queue at this time.`),t.ws&&t.ws.readyState===u.OPEN&&t.ws.send(JSON.stringify({type:"queue_update",position:I.findIndex(e=>e.ws===t.ws)+1,total:I.length,message:"Still in queue, waiting for a spot..."}))):(console.log(`[Queue] WS for player ${t.connectionId} is no longer open. Removing from queue.`),I.shift(),0<I.length&&setTimeout(S,50))}}setInterval(()=>{var e,t=Date.now();let a=0;for(e in f){var s=f[e],n=Object.values(s.players).filter(e=>e.ws&&e.ws.readyState===u.OPEN).length,i=Object.values(s.players).filter(e=>"disconnected_ingame"!==e.status).length;0===n&&0===i?(console.log(`[Server Cleanup] GameInstance ${e} has no active connections and no player data. Removing.`),s.stopBroadcasting(),delete f[e],a++):6e5<t-s.lastActivityTime&&(console.log(`[Server Cleanup] GameInstance ${e} timed out due to inactivity. Removing.`),s.stopBroadcasting(),Object.values(s.players).forEach(e=>{e.ws&&e.ws.readyState===u.OPEN&&e.ws.close(1001,"Game instance timed out due to inactivity.")}),delete f[e],a++)}0<a&&(console.log(`[Server Cleanup] Removed ${a} inactive/empty instance(s). Checking queue.`),S())},6e4),o.on("upgrade",(t,e,a)=>{let s=t.socket.remoteAddress||(t.headers["x-forwarded-for"]?t.headers["x-forwarded-for"].split(",")[0].trim():"Unknown IP");console.log(`[Server HTTP Upgrade] Received upgrade request from ${s} for URL: `+t.url),g.handleUpgrade(t,e,a,e=>{console.log(`[Server HTTP Upgrade] WebSocket upgrade successful for ${s}. Emitting 'connection' to wsServer.`),g.emit("connection",e,t)})}),console.log("[Server] HTTP 'upgrade' event listener registered."),g.on("connection",(s,e)=>{let n="conn_"+c.randomBytes(3).toString("hex");var e=e.socket.remoteAddress||(e.headers["x-forwarded-for"]?e.headers["x-forwarded-for"].split(",")[0].trim():"Unknown IP from req"),t=`[3${parseInt(n.substring(5,7),16)%6+1}m`,e=(h[n]=t,console.log(t+`[WS Connection] wsServer 'connection' event fired for ${n} from ${e}[0m`),s.gameInstanceId=null,s.playerIdInInstance=null,s.isInQueue=!1,I.findIndex(e=>e.ws===s)),e=(-1<e&&(console.log(`[WS ${n}] WS was already in queue. Removing old entry before processing new connection.`),I.splice(e,1)),$({ws:s,connectionId:n,initialName:null}));if(e.assigned)console.log(t+`[WS ${n}] Player successfully assigned to instance ${e.instanceId}.[0m`),s.isInQueue=!1;else if(e.removeFromQueue){if(console.log(t+`[WS ${n}] Player could not be assigned and was marked for removal (reason: ${e.reason||"unknown"}). Closing connection if open.[0m`),s.readyState===u.OPEN)try{s.send(JSON.stringify({type:"session_ended",reason:e.reason||"Failed to join or create game."})),s.close(1008,e.reason||"Failed to join/create game")}catch(e){console.warn(`Error closing WS for ${n} after failed assignment: `+e.message)}}else console.log(t+`[WS ${n}] No immediate spot. Adding player to queue.[0m`),I.push({ws:s,connectionId:n,initialName:null,joinTimestamp:Date.now()}),s.isInQueue=!0,s.send(JSON.stringify({type:"queue_update",position:I.length,total:I.length,message:"All games are currently busy. You've been added to the queue."}));s.on("message",e=>{if(s.isInQueue)try{var t=JSON.parse(e);"set_player_name"===t.type&&t.name&&(a=I.find(e=>e.ws===s))&&(a.initialName=t.name.substring(0,15),console.log(`[Queue] Player ${a.connectionId} (name: ${a.initialName}) updated name while in queue.`),s.send(JSON.stringify({type:"name_received_in_queue",name:a.initialName})))}catch(e){console.error(`[Queue] Error processing message from queued WS ${n}:`,e)}else{var t=s.gameInstanceId,a=s.playerIdInInstance;t&&f[t]&&a?f[t].handleMessage(a,e):console.error(`[WS ${n}] Received message but no valid gameInstanceId (${t}) or playerIdInInstance (${a}) on non-queued WS.`)}}),s.on("close",(e,t)=>{console.log(`${h[n]||""}[WS ${n}] Connection closed. InQueue: ${s.isInQueue}, PlayerID: ${s.playerIdInInstance}, Instance: ${s.gameInstanceId}. Code: ${e}, Reason: ${t||"N/A"}\x1b[0m`),s.isInQueue?(I=I.filter(e=>e.ws!==s),console.log(`[Queue] Player ${n} removed from queue due to close. ${I.length} remaining.`)):(e=s.gameInstanceId,t=s.playerIdInInstance,e&&f[e]&&t&&(f[e].removePlayer(t)&&console.log(`[Server] GameInstance ${e} is now empty. Cleanup interval will handle removal if it stays empty.`),S())),delete h[n]}),s.on("error",e=>{var t;if(console.error(`${h[n]||""}[WS ${n}] WebSocket error. InQueue: ${s.isInQueue}, PlayerID: ${s.playerIdInInstance}, Instance: ${s.gameInstanceId}:`,e,"[0m"),s.isInQueue?(I=I.filter(e=>e.ws!==s),console.log(`[Queue] Player ${n} (error) removed from queue. ${I.length} remaining.`)):(e=s.gameInstanceId,t=s.playerIdInInstance,e&&f[e]&&t&&(f[e].removePlayer(t)&&console.log(`[Server] GameInstance ${e} became empty due to player error.`),S())),delete h[n],s.readyState===u.OPEN||s.readyState===u.CONNECTING)try{s.close(1011,"WebSocket error on server")}catch(e){}})});let x=process.env.PORT||8081;o.listen(x,"0.0.0.0",()=>{var e,t=o instanceof n.Server?"HTTPS":"HTTP",a=(console.log(`✅ ${t} Server listening on port ${x}. Ready for HTTP requests and WebSocket upgrades.`),i.networkInterfaces());console.log("🌐 Reachable at:");for(e of Object.keys(a))for(var s of a[e])"IPv4"!==s.family||s.internal||console.log(`   • ${t.toLowerCase()}://${s.address}:`+x);console.log("⚙️ Server setup complete. Waiting for connections...")}).on("error",e=>{console.error(`❌❌❌ Failed to start server on port ${x}:`,e),"EADDRINUSE"===e.code&&console.error(`❌❌❌ Port ${x} is already in use. Please choose another port or stop the existing process.`),process.exit(1)});